import { CommonPathResolver } from '@tezjs/common';

declare class PageCollection {
    private requestService;
    private internationalizationService;
    private pageRoute;
    private payloadGenerator;
    private pathResolver;
    private commonPathResolver;
    private sitemap;
    private robotsGenerator;
    private redirectRoute;
    private customPagePayload;
    private deployment;
    private globWriter;
    constructor();
    generate(routePath?: string): Promise<void>;
    generateStrapiPayload(routePath?: string): Promise<void>;
    deletePayloadItem(routePath: string): void;
}

declare class PathResolver {
    commonPath: CommonPathResolver;
    constructor();
    get publicFolder(): string;
    get payloadPath(): string;
    get rootPath(): string;
    get routesJsonPath(): string;
    get robotsTxtPath(): string;
    get redirectRoutesJsonPath(): string;
    get sitemapJsonPath(): string;
    get globJsonPath(): string;
    get routeComponentsPath(): string;
    get sitemapXmlPath(): string;
    get sitemapNotMappedJsonPath(): string;
    getCollectionPayloadPath(collectionName: string): string;
    getFilterCollectionPayloadPath(collectionName: string): string;
    pathExists(path: string): boolean;
}

declare class GlobWriter {
    components: Array<string>;
    layouts: Array<string>;
    pathResolver: PathResolver;
    constructor();
    addComponent(name: string): void;
    addLayout(name: string): void;
    write(): void;
}

export { GlobWriter, PageCollection };
