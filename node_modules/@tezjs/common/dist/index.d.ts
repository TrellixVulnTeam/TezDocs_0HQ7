import { TezConfig, StrapiModuleConfig, BuildOptions, TezSeo } from '@tezjs/types';

declare const commonContainer: {
    setupConfig(tezConfig?: TezConfig): void;
    tezConfig: TezConfig;
    getAppRoutes(): any[];
    expressConfig: {
        [key: string]: any;
    };
    getStrapiConfig(): StrapiModuleConfig;
    buildOptions: BuildOptions;
};

declare function resolvePath(fPath: string): string;

declare function getPath(pathCollection: string[], isCreateFolder?: boolean): string;

declare function createPath(pathToCreate: any): boolean;

declare class CommonPathResolver {
    get indexHtmlPath(): string;
    get rootPath(): string;
    get publicFolder(): string;
    get cachePath(): string;
    get depsPath(): string;
    get distPath(): string;
    get clientEnvPath(): string;
    get tezTsPath(): string;
    get serverEnvPath(): string;
    get addLibPath(): string;
    get routesJsonPath(): string;
    get redirectRoutesJsonPath(): string;
    get payloadPath(): string;
    get imageFolderPath(): string;
    get storePath(): string;
    get routerPath(): string;
    get layoutsPath(): string;
    get componentsPath(): string;
    get pluginsPath(): string;
    get pagesPath(): string;
    get tzJsPath(): string;
    getExistsFilesOrFolders(): {
        components: boolean;
        layouts: boolean;
        router: boolean;
        store: boolean;
        addLib: boolean;
        useVue: boolean;
        pages: boolean;
    };
    pathExists(filePath: string): boolean;
    removeDirSync(path: string): void;
    deleteFile(path: string): void;
    getPath(path: Array<string>): string;
    getFilePath(directories: Array<string>, fileName: string): string;
}

declare function readFileSync(path: string, isString?: boolean): string | {
    [key: string]: any;
} | any[];

declare function writeFileSync(path: string, content: any, isString?: boolean): Promise<void>;

declare function isObject(value: any): boolean;

declare function isArray(value: any): boolean;

declare function deepMerge(object: any, source: any): any;

declare function subText(text: string, from: number, to: number): string;

declare class PayloadReader {
    route: {
        name: string;
        path: string;
        fPath: string;
    };
    _components: {
        slots: {
            [key: string]: any[];
        };
        masterPage: any;
        string: any;
    };
    _tags: {
        [key: string]: any;
    };
    _masterPage: {
        slots: {
            [key: string]: any[];
        };
    };
    isComponentExists: boolean;
    isMasterPageExists: boolean;
    isTagsExists: boolean;
    commonPath: CommonPathResolver;
    private lastUrlPath;
    constructor(route: {
        name: string;
        path: string;
        fPath: string;
    });
    get componentPath(): string;
    get masterPagePath(): string;
    get tagsPath(): string;
    get components(): Partial<{
        slots: {
            [key: string]: any[];
        };
        masterPage: any;
        string: any;
    }>;
    get tags(): TezSeo;
    get masterPage(): Partial<{
        slots: {
            [key: string]: any[];
        };
        layoutName: string;
    }>;
    getData(componentName: string): {};
}

export { CommonPathResolver, PayloadReader, commonContainer, createPath, deepMerge, getPath, isArray, isObject, readFileSync, resolvePath, subText, writeFileSync };
