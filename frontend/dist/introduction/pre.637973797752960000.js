import n from"/assets/header.component.637973797752960000.js";import a from"/assets/content_right_menu.component.637973797752960000.js";import o from"/assets/main.layout.637973797752960000.js";function d(e,t){e({components:{header:n,"content-right-menu":a},masterPage:{main:o},payload:{url:"/introduction",slots:{default:[{name:"content-right-menu",data:{title:"Introduction",longText:`<p>While traditional CMS design has long been the standard, businesses are increasingly moving to headless CMS options for more flexibility and scalability. Learn the distinctions between a traditional CMS design and a headless CMS architecture and why companies are implementing content infrastructure.</p><p>In the following 5 minutes, you'll discover everything you need to know about Headless CMS by reading on. So, without further ado, let's get to it.</p><p><img src="http://localhost:1337/uploads/headlesscms_126f4caabf.jpg" alt="undefined" title="" loading="lazy" width="942" height="495"></p><ol><li>What is a Headless Content Management System (CMS)?</li><li>What is Headless Content?</li><li>How Does a Headless CMS Work?</li><li>Headless CMS Benefits</li><li>Headless CMS vs Traditional CMS: A Comparative Analysis</li><li>Headless CMS Use Cases</li><li>Advantages of a Headless CMS</li><li>To Use a Headless CMS, Follow These Steps:</li><li>Why Headless CMS?</li><li>Important Points to Remember</li><li>In Summation</li><li>Introduction to the Content-type Builder</li></ol><h2><strong>What is a Headless Content Management System (CMS)?</strong> {#whatCMS}</h2><p>To understand what a headless CMS is, let's start with the qualities of a monolithic CMS:</p><ul><li>A database of content that can be read and written to.</li><li>An admin interface that allows editors to make changes to the content.</li><li>In this process, reading and writing are integrated.</li></ul><p>Because the website is the CMS's head, we remove the templating functionality from the stack to make it a headless CMS. To make data formerly locked away in the admin interface available to other systems, a RESTful or graphQL API can now be used in its place. And there you have it: you now have a headless CMS.</p><p>Each backend content management system in which the repository of content is detached or decoupled is known as a headless CMS. eg. decoupled Wordpress APIs are used to serve content saved in a headless CMS, ensuring that it is shown reliably on all devices.</p><h2><strong>What is Headless Content?</strong> {#whatHC}</h2><p>With a &quot;headless API,&quot; you can publish content to a different presentation layer than the one provided by some traditional CMS solutions.</p><p>The content in a headless architecture is unformatted and unprocessed, and its final display isn't bound by a frontend system.</p><h2><strong>How Does a Headless CMS Work?</strong> {#howHCMS}</h2><h4>image2</h4><p>The following is how a headless CMS works:</p><ul><li>It enables editors to manage their own content through a user-friendly interface.</li><li>With some headless CMSs, you may run the full solution from your own server and database. This technique necessitates that you build and run your own company.</li><li>Numerous products can be powered by this source.</li></ul><h2><strong>Headless CMS Benefits</strong> {#benefitHCMS}</h2><p>In today's digital world, businesses are often hampered by the proliferation of CMS instances - sometimes in the dozens, sometimes in the hundreds.</p><ul><li>A Single, Headless Content Center is Created to House All of the Gathered Data</li></ul><p>Content infrastructure makes it possible for organizations to consolidate all of their content in a single content, reducing the need for manual copying and pasting.</p><ul><li>Simultaneous Collaboration is Possible</li></ul><p>A headless CMS is an advantage for companies that need to rapidly generate new software, landing pages, and microsites. It's a good thing.</p><ul><li>Increases the Accessibility and Reusability of Content Resources.</li></ul><p>Finally, content infrastructure promotes reusability, which is crucial for making the most of content production resources.</p><h2><strong>Headless CMS vs Traditional CMS: A Comparative Analysis</strong> {#differenceCMS}</h2><table><thead><tr><th style="text-align:left">Factors</th><th style="text-align:center">Traditional CMS</th><th style="text-align:center">Headless CMS</th></tr></thead><tbody><tr><td style="text-align:left">Architecture</td><td style="text-align:center">One-to-one</td><td style="text-align:center">One-to-many</td></tr><tr><td style="text-align:left">Extensibility</td><td style="text-align:center">Monolithic</td><td style="text-align:center">Modular</td></tr><tr><td style="text-align:left">Responsiveness</td><td style="text-align:center">Limited</td><td style="text-align:center">Responsive by design</td></tr><tr><td style="text-align:left">Implementation and integration</td><td style="text-align:center">Punctuated</td><td style="text-align:center">Continuous</td></tr><tr><td style="text-align:left">Engineering</td><td style="text-align:center">DIY</td><td style="text-align:center">Managed</td></tr><tr><td style="text-align:left">Experience</td><td style="text-align:center">Legacy</td><td style="text-align:center">Modern</td></tr><tr><td style="text-align:left">Speed</td><td style="text-align:center">Increased load duration</td><td style="text-align:center">Reduced load times</td></tr><tr><td style="text-align:left">Iterations</td><td style="text-align:center">Long iterations</td><td style="text-align:center">Rapid development</td></tr></tbody></table><h2><strong>Headless CMS Use Cases</strong> {#usesHCMS}</h2><p>Here are few use cases of Headless CMS!</p><ul><li>Websites and Web Apps</li></ul><p>This is a popular choice for high-performance &quot;Jamstack&quot; sites that use static-site generators. Top Javascript frameworks like React, Vue.js, Svelte, and Angular make use of them, and they can be used for web projects as well.</p><p>Products and Services<br>If this is the case, you'll be able to manage all of your content, including voice assistants, digital kiosks, print, and websites, from a single spot.</p><ul><li>Product-selling Websites</li></ul><p>The backend of an e-commerce site can be powered by some headless CMSs.</p><p>Even though there isn't a perfect CMS for every use case, we believe that cutting off your content's presentation layer and making it available to several platforms is the best strategy! Not only will you be able to reuse your material more simply, but you won't have to worry about your content if you ever wish to change your technology stack.</p><h2><strong>Advantages of a Headless CMS</strong> {#advantageHCMS}</h2><p>Check the business advantages of Headless CMS:</p><ul><li>Editing Experiences That are Faster</li></ul><p>Content editing and rendering are time and money consuming tasks in traditional CMS designs. Headless CMS systems are advantageous over traditional ones since they do not have to deal with the complexities of rendering.</p><ul><li>Greater Channels Necessitate More Content Management</li></ul><p>Because headless content isn't constrained by a particular display concern (such as a website), it can reach a wider audience. You can even handle all of your internal/admin content in one area and get more value out of it.</p><ul><li>Flexibility of the Developer</li></ul><p>Because APIs are used to deliver headless content, any frontend tool can be used. You can also swap out components of your stack or switch frameworks without affecting the CMS.</p><ul><li>Enhanced Safety</li></ul><p>Because headless content is separated from the display layer, the attack surface is less.</p><h2><strong>To Use a Headless CMS, Follow These Steps:</strong> {#touseHCMS}</h2><ul><li>You need a central content center from which to extract data from a variety of sites.</li><li>Access to frontend development resources is at your disposal here.</li><li>You want to use the languages and frameworks that you prefer.</li><li>When delivering projects, you want to adhere to JAMStack principles and keep your workflows fluid.</li><li>You'll need a one-of-a-kind design to show off your content.</li><li>You've got a multilingual and multi-device project going on.</li><li>Regular updates and additions to the content are made.</li></ul><h2><strong>Why Headless CMS?</strong> {#whyHCMS}</h2><p>By using an API, you may have a headless CMS provide your content right where you need it. Using a headless approach, the content may be used across a variety of platforms and technologies, making it a viable option for mobile and web developers alike.</p><p>WordPress and Drupal are already attempting to offer an API approach. Using the CMS in ways it wasn't designed for is the goal of both of these companies\u2019 strategies. Here are various headless CMS choices to evaluate in order to find the finest fit: When we think about headless, we think of words like Tez, DotCMS, Contentful, Strapi and Cockpit. These are the top 5 headless CMS examples that have gained immense traction and utility in 2022. There are additional platforms accessible, but those are the ones you should consider based on their features and philosophy.</p><p>A headless CMS provides editors with an interface for conveniently managing content, as well as APIs for developers to design apps, making content storage, editing, and publishing easier and faster.</p><h2><strong>Important Points to Remember</strong> {#IPR}</h2><p>Here are the top points to remember when opting for a headless CMS in 2022 and beyond:</p><ul><li>There is no way for a Headless CMS to regulate where or how content is presented, as there is with a traditional CMS like WordPress.</li><li>Teams can deliver omni-channel experiences at scale, internationally, without templates, devices, or pre-defined technologies, using a Headless CMS.</li><li>To transition to a Headless CMS, you'll require certain technological resources.</li></ul><h2><strong>In Summation</strong> {#IS}</h2><p>One of the most common types of headless CMS is one that only manages the content on the back end rather than on the front and makes it available to any device that can access the API via RESTful or GraphQL methods.</p><p>Headless websites are those in which the &quot;head&quot; (the website's front end) has been removed from the &quot;body&quot; (the content repository), hence the term &quot;headless&quot; (the back end, i.e., the content repository).</p><p>An ideal headless CMS development partner will take this approach, offering you the option to customize when and how your content is displayed. If you're building a modern online application, you need this technology because it focuses solely on structured content storage and distribution. We trust that this article proves informative. Until next time, happy developing!</p><h2><strong>Introduction to the Content-type Builder</strong> {#introCTB}</h2><p>The Content-type Builder is a core plugin of Strapi. It is a feature that is always activated by default and cannot be deactivated. The Content-type Builder is however only accessible when the application is in a development environment.</p><p>Administrators can access the Content-type Builder from \u201CContent-type Builder\u201D in the main navigation of the admin panel.</p><p><strong>Image3</strong></p><p>The Content-type Builder allows to create new content-types. Although they are not proper content-types as they cannot exist independently.</p><p>The Content-type Builder allows to manage any existing content-type or component, even if it is already being used in the Content Manager. They can only be managed one at a time.</p><p>From the Content-type Builder, administrators can create and manage content-types: collection types, single types and components.</p><ul><li><strong>Collection types</strong> are content-types that can manage several entries.</li><li><strong>Single types</strong> are content-types that can only manage one entry.</li><li><strong>Components</strong> are a data structure that can be used in multiple collection types and single types.</li></ul><p>All 3 content-types are displayed as categories in the sub navigation of the Content-type Builder. In each category are listed all content-types and components that have already been created.</p><p>From each category of the Content-type Builder sub navigation, it is possible to:</p><ul><li>click on an existing content-type or component to access it and edit it (see <strong>Managing content-types</strong>),</li><li>or create a new content-type or component (see <strong>Creating content-types</strong>).</li></ul><p>To manage a content-type or a component, click on its name in the Collection types, Single types or Components category.</p>`,vueReferenceCode:"content-right-menu",cTA:`[What is a Headless Content Management System (CMS)?](#whatCMS)

[What is Headless Content?](#whatHC)

[How Does a Headless CMS Work?](#howHCMS)

[Headless CMS Benefits](#benefitHCMS)

[Headless CMS vs Traditional CMS: A Comparative Analysis](#differenceCMS)

[Headless CMS Use Cases](#usesHCMS)

[Advantages of a Headless CMS](#advantageHCMS)

[To Use a Headless CMS, Follow These Steps:](#touseHCMS)

[Why Headless CMS?](#whyHCMS)

[Important Points to Remember](#IPR)

[In Summation](#IS)

[Introduction to the Content-type Builder](#introCTB)













`},id:"0-content-right-menu"}]},masterPageSlots:{header:[{name:"header",data:{componentName:"header"},id:"0-header"}],footer:[{name:"footer",data:{componentName:"footer"},id:"1-footer"}]},tags:{title:"Introduction | TezJS",canonical:"/introduction",metaTag:{}},layoutName:"main"},postScript:()=>t(()=>import("./post.637973797752960000.js"),["assets/plugin-vue_export-helper.637973797752960000.js","assets/footer.component.637973797752960000.js"])})}export{d as default};
